# Copyright 2016 LinkedIn Corp. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
# file except in compliance with the License. You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
# an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

# This properties file specifies the tests/services that KafkaMonitor
# should instantiate and run, together with the key/value pairs used to
# configure these tests/services. It should have the following format:
#
# {
#   "name1" : {
#     "type": TestClassName
#     "key1": value1,
#     "key2": value2,
#     ...
#   },
#   "name2" : {
#     "type": ServiceClassName
#     "key1": value1,
#     "key2": value2,
#     ...
#   },
#   ...
# }
#
# TestClassName can be canonical name or simple name of any class that implements
# interface com.linkedin.kmf.services.Test. These classes should be under
# package com.linkedin.kmf.tests.
#
# ServiceClassName can be canonical name or simple name of any class that implements
# interface com.linkedin.kmf.services.Service. These classes should be under
# package com.linkedin.kmf.services.
#
# Each test/service should be configured with class.name which can be either TestClassName
# or ServiceClassName. The key for the test/service in the json map is used as name to
# identify the test/service in the log or JMX metrics, which is useful if multiple
# test/service with the same class.name are run in the same Kafka Monitor process.
#
# If using Secure Socket Layer for security protocol, SSL properties must be defined under
# produce.producer.props, consume.consumer.props, as well as single-cluster-monitor props

{
  "single-cluster-monitor": {
    "class.name": "com.linkedin.kmf.apps.SingleClusterMonitor",
    "topic": "kafka-monitor-topic",
    "zookeeper.connect": "localhost:2181",
    "bootstrap.servers": "localhost:9092",
    "request.timeout.ms": 9000,
    "produce.record.delay.ms": 100,
    "topic-management.topicCreationEnabled": true,
    "topic-management.replicationFactor" : 1,
    "topic-management.partitionsToBrokersRatio" : 2.0,
    "topic-management.rebalance.interval.ms" : 600000,
    "topic-management.preferred.leader.election.check.interval.ms" : 300000,
    "topic-management.topicFactory.props": {
    },
    "topic-management.topic.props": {
      "retention.ms": "3600000"
    },
    "produce.producer.props": {
      "client.id": "kmf-client-id"
    },

    "consume.latency.sla.ms": "20000",
    "consume.consumer.props": {
    }
  },

  "jolokia-service": {
    "class.name": "com.linkedin.kmf.services.JolokiaService"
  },

  "reporter-service": {
    "class.name": "com.linkedin.kmf.services.DefaultMetricsReporterService",
    "report.interval.sec": 1,
    "report.metrics.list": [
        "kmf:type=kafka-monitor:offline-runnable-count",
        "kmf.services:type=produce-service,name=*:produce-availability-avg",
        "kmf.services:type=consume-service,name=*:consume-availability-avg",
        "kmf.services:type=commit-availability-service,name=*:offsets-committed-avg",
        "kmf.services:type=commit-availability-service,name=*:failed-commit-offsets-avg",
        "kmf.services:type=produce-service,name=*:records-produced-total",
        "kmf.services:type=consume-service,name=*:records-consumed-total",
        "kmf.services:type=consume-service,name=*:records-lost-total",
        "kmf.services:type=consume-service,name=*:records-lost-rate",
        "kmf.services:type=consume-service,name=*:records-duplicated-total",
        "kmf.services:type=consume-service,name=*:records-delay-ms-avg",
        "kmf.services:type=produce-service,name=*:records-produced-rate",
        "kmf.services:type=produce-service,name=*:produce-error-rate",
        "kmf.services:type=consume-service,name=*:consume-error-rate",
        "kmf.services:type=commit-availability-service,name=*:offsets-committed-total",
        "kmf.services:type=commit-latency-service,name=*:commit-offset-latency-ms-avg",
        "kmf.services:type=commit-latency-service,name=*:commit-offset-latency-ms-max",
        "kmf.services:type=commit-latency-service,name=*:commit-offset-latency-ms-99th",
        "kmf.services:type=commit-latency-service,name=*:commit-offset-latency-ms-999th",
        "kmf.services:type=commit-latency-service,name=*:commit-offset-latency-ms-9999th",
        "kmf.services:type=commit-availability-service,name=*:failed-commit-offsets-total"
    ]
  }

#  Example produce-service to produce messages to cluster
#    "produce-service": {
#        "class.name": "com.linkedin.kmf.services.ProduceService",
#        "topic": "kafka-monitor-topic",
#        "zookeeper.connect": "localhost:2181",
#        "bootstrap.servers": "localhost:9092",
#        "consume.latency.sla.ms": "20000",
#        "consume.consumer.props": {
#        }
#    },

#  Example consume-service to consume messages
#    "consume-service": {
#        "class.name": "com.linkedin.kmf.services.ConsumeService",
#        "topic": "kafka-monitor-topic",
#        "zookeeper.connect": "localhost:2181",
#        "bootstrap.servers": "localhost:9092",
#        "consume.latency.sla.ms": "20000",
#        "consume.consumer.props": {
#        }
#    },

#  Example statsd-service to report metrics
#  "statsd-service": {
#      "class.name": "com.linkedin.kmf.services.StatsdMetricsReporterService",
#      "report.statsd.host": "localhost",
#      "report.statsd.port": "8125",
#      "report.statsd.prefix": "kafka-monitor",
#      "report.interval.sec": 1,
#      "report.metrics.list": [
#      "kmf:type=kafka-monitor:offline-runnable-count",
#      "kmf.services:type=produce-service,name=*:produce-availability-avg",
#      "kmf.services:type=consume-service,name=*:consume-availability-avg"
#     ]
#  }

#  Example kafka-service to report metrics
#  "reporter-kafka-service": {
#    "class.name": "com.linkedin.kmf.services.KafkaMetricsReporterService",
#    "report.interval.sec": 3,
#    "zookeeper.connect": "localhost:2181",
#    "bootstrap.servers": "localhost:9092",
#    "topic": "kafka-monitor-topic-metrics",
#    "report.kafka.topic.replication.factor": 1,
#    "report.metrics.list": [
#      "kmf.services:type=produce-service,name=*:produce-availability-avg",
#      "kmf.services:type=consume-service,name=*:consume-availability-avg",
#      "kmf.services:type=produce-service,name=*:records-produced-total",
#      "kmf.services:type=consume-service,name=*:records-consumed-total",
#      "kmf.services:type=consume-service,name=*:records-lost-total",
#      "kmf.services:type=consume-service,name=*:records-duplicated-total",
#      "kmf.services:type=consume-service,name=*:records-delay-ms-avg",
#      "kmf.services:type=produce-service,name=*:records-produced-rate",
#      "kmf.services:type=produce-service,name=*:produce-error-rate",
#      "kmf.services:type=consume-service,name=*:consume-error-rate"
#    ]
#  }

#  Example signalfx-service to report metrics
# "signalfx-service": {
#   "class.name": "com.linkedin.kmf.services.SignalFxMetricsReporterService",
#   "report.interval.sec": 1,
#   "report.metric.dimensions": {
#   },
#   "report.signalfx.url": "",
#   "report.signalfx.token" : ""
# }

}
