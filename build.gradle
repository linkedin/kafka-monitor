
def configDocDir = "${buildDir}/configDocs"

buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4"
  }
}
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'distribution'


allprojects {
  apply plugin: 'idea'
  apply plugin: 'eclipse'
  apply plugin: 'java'
  apply plugin: 'checkstyle'

  sourceCompatibility = 8
  targetCompatibility = 8

  group = 'com.linkedin.kmf'

  repositories {
    mavenCentral()
  }

  dependencies {
    compile 'net.sourceforge.argparse4j:argparse4j:0.5.0'
    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.13.0'
    compile 'org.apache.avro:avro:1.4.0'
    compile 'org.testng:testng:6.8.8'
    compile 'org.eclipse.jetty:jetty-server:8.1.19.v20160209'
    compile 'org.json:json:20140107'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.7.1'
    compile 'org.jolokia:jolokia-jvm:1.6.2'
    compile 'net.savantly:graphite-client:1.1.0-RELEASE'
    compile 'com.timgroup:java-statsd-client:3.0.1'
    compile 'com.signalfx.public:signalfx-codahale:0.0.47'
    compile group: 'org.apache.kafka', name: 'kafka_2.12', version: '2.3.1'
    compile group: 'org.apache.kafka', name: 'kafka-clients', version: '2.4.0'
    testCompile 'org.mockito:mockito-core:2.24.0'
    testCompile 'org.testng:testng:6.8.8'
  }

  tasks.create(name: "copyDependantLibs", type: Copy) {
    from(configurations.testRuntime) {
      include('slf4j-log4j12*')
    }
    from(configurations.runtime) {}
    into "build/dependant-libs"
    duplicatesStrategy 'exclude'
  }

  jar {
    doFirst {
      manifest {
        // embed version information into jar manifests
        attributes('Name': "${project.name}",
            'Specification-Title': "${project.name}",
            'Specification-Version': "${project.version}",
            'Specification-Vendor': "LinkedIn",
            'Implementation-Title': "${project.name}",
            'Implementation-Version': "${project.version}",
            'Implementation-Vendor': "LinkedIn")
      }
    }

    dependsOn 'copyDependantLibs'
  }

  task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    classifier "sources"
  }

  task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
  }

  task testJar(type: Jar) {
    from sourceSets.test.allJava
    classifier = 'tests'
  }

  publishing {
    publications {
      MyPublication(MavenPublication) {
        groupId project.group
        artifactId project.name
        version project.version

        from components.java
        artifact sourceJar
        artifact javadocJar
        artifact testJar
        artifact distZip
        artifact distTar

        pom {
          name = 'kafka-monitor'
          description = 'kafka monitor'
          url = 'https://github.com/linkedin/kafka-monitor'

          licenses {
            license {
              name = 'The Apache Software License, Version 2.0'
              url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
          }
          scm {
            connection = 'scm:git:git://github.com:linkedin/kafka-monitor.git'
            developerConnection = 'scm:git:ssh://github.com:linkedin/kafka-monitor.git'
            url = 'https://github.com/linkedin/kafka-monitor'
          }
        }
      }
    }
  }

  artifacts {
    archives testJar
  }

  checkstyle {
    configFile = new File(rootDir, "checkstyle/checkstyle.xml")
    configProperties = ["suppressionFile": new File(rootDir, "checkstyle/suppressions.xml")]
  }

  task createConfigDocs( dependsOn : compileJava, type : JavaExec) {
    outputs.dir configDocDir
    classpath sourceSets.main.runtimeClasspath
    main = 'com.linkedin.kmf.common.ConfigDocumentationGenerator'
    args = [configDocDir,
            'com.linkedin.kmf.services.configs.ConsumeServiceConfig',
            'com.linkedin.kmf.services.configs.DefaultMetricsReporterServiceConfig',
            'com.linkedin.kmf.services.configs.JettyServiceConfig',
            'com.linkedin.kmf.services.configs.ProduceServiceConfig',
            'com.linkedin.kmf.services.configs.TopicManagementServiceConfig',
            'com.linkedin.kmf.apps.configs.MultiClusterMonitorConfig']
  }

  build.dependsOn createConfigDocs

  test.dependsOn('checkstyleMain', 'checkstyleTest')

  test {
    useTestNG()

    testLogging {
      events "passed", "skipped", "failed"
      exceptionFormat = 'full'
    }
  }

  distributions {
    main {
      contents {
        into('bin') {
          from 'bin'
        }
        into('build/libs') {
          from jar
        }
        into('build/dependant-libs') {
          from copyDependantLibs
        }
        into('config') {
          from 'config'
        }
        into('build/configDocs') {
          from createConfigDocs
        }
        into('webapp') {
          from 'webapp'
        }
        from('.') {
          include 'README.md'
        }
      }
    }
  }
  tasks.withType(Tar){
    compression = Compression.GZIP
    extension = 'tar.gz'
  }

}

bintray {
  user = System.getenv('BINTRAY_USER')
  key = System.getenv('BINTRAY_KEY')
  publications = ['MyPublication']
  pkg {
    repo = 'maven'
    name = 'kafka-monitor'
    userOrg = 'linkedin'
    licenses = ['Apache-2.0'] // this is validated by bintray and must be a valid license
    vcsUrl = 'https://github.com/linkedin/kafka-monitor.git'
    version {
      name = project.version
    }
    publish = true
  }
}
wrapper {
  gradleVersion = '5.2.1'
  distributionType = Wrapper.DistributionType.ALL

}
